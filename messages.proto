syntax = "proto3";

package se.locutus.proto;

option java_outer_classname = "Ng";

// Should be there in each request to the server.
message RequestHeader {
  // Version ID from client.
  int32 api = 1;
  // ID of this request, so the response can be identified.
  int32 id = 2;
}

// Present in each response.
message ResponseHeader {
 // ID from the incoming request.
 int32 id = 1;
 // VersionCode from server.
 int32 server_version = 2;
}

// Base request message.
message RequestData {
  RequestHeader request_header = 1;
  // Ping to see server is reachable.
  PingRequestResponse ping_request = 2;
  // Request to load data from a particular stop.
  StopDataRequest stop_data_request = 3;
  // Search for stops.
  StopSearchRequest stop_search_request = 4;
  // Request from client to set departure metadata.
  SetDepartureMetaData set_depature_meta_data = 5;
  // Request operator config.
  repeated ResRobotOperatorEnum request_operator_config = 6;
}

// Base response message.
message ResponseData {
  ResponseHeader response_header = 1;
  // Response with data suitable to display in widget.
  WidgetLoadResponseData load_response = 2;
  // Returns all departures for a stop.
  AllDepaturesResponseData all_depatures_response = 3;
  // A response to a ping.
  PingRequestResponse ping_response = 4;
  // Error response, set if we could handle the error
  LoadErrorResponse error_response = 5;
  // Return list of stops that matched our search.
  StopSearchResponse stop_search_response = 6;
  // Returns list of operator configs.
  repeated OperatorConfig operator_config = 7;
}

message SetDepartureMetaData {
  // Update with the data avaliable here.
  DepartureData departure_data = 1;
}

message StopSearchRequest {
  string query = 1;
}

message StopSearchResponse {
  repeated StopData stop_data = 1;
}


// Response message suitable to put in the widget.
message WidgetLoadResponseData {
  // What to put in line1.
  string line1 = 1;
  // What to put in line2.
  string line2 = 2;
  // Minutes in the form of "x min", might have a "." indicating data isn't realtime.
  string minutes = 3;
  // If realtime we include seconds to departure.
  int32 seconds = 4;
  // Color representing this departure.
  int32 color = 5;
  // Traffic type for the line1 departure.
  NgTrafficType traffic_type = 6;
  
  // What the widget should show when idle, at line 2.
  string idle_message = 7;
  // URL with information that opens when line2 is touched.
  string url = 8;
}

enum ErrorType {
  UNKNOWN_ERROR = 0;
  NO_DEPARTURES = 1;
  SL_API_ERROR = 2;
}

message LoadErrorResponse {
  ErrorType error_type = 1;
  string message = 2;
}

// A response that contains all the data we have about a stop.
message AllDepaturesResponseData {
  // Details about this stop.
  StopData stop_data = 1;
  // Details about all the known departure from this stop.
  repeated DepartureData depature_data = 2;
}

enum NgTrafficType {
  UNKNOWN_TRAFFIC_TYPE = 0;
  METRO = 1;
  BUS = 2;
  TRAIN = 3;
  TRAM = 4;
  BOAT = 5;
  SPEED_TRAIN = 6;
  REGIONAL_TRAIN = 7;
}

// From https://www.trafiklab.se/sv/api/trafiklab-apis/resrobot-v21/common/
enum ResRobotOperatorEnum {
  UKNOWN_OPERATOR = 0;
  SJ = 74;
  VY = 76;
  UL = 251;
  SORMLANDSTRAFIKEN = 252;
  OSTGOTATRAFIKEN = 253;
  JLT = 254;
  KLT = 256;
  BLEKINGETRAFIKEN = 258;
  HALLANDSTRAFIKEN = 261;
  VARMLANDSTRAFIK = 265;
  VL = 266;
  DALATRAFIK = 267;
  X_TRAFIK = 268;
  LANSTRAFIKEN_JAMTLAND = 271;
  LANSTRAFIKEN_VASTERBOTTEN = 272;
  LANSTRAFIKEN_NORRBOTTEN = 273;
  SL = 275;
  SKANETRAFIKEN = 276;
  FLYGBUSSSARNA = 277;
  VASTTRAFIK = 279;
  ARLANDA_EXPRESS = 287;
  LANSTRAFIKEN_OREBRO = 289;
  ORESUNDSTAG = 300;
  MALARTAG = 313;
  VY_TAG = 315;
  VARMLANDSTRAFIK_TRAIN = 317;
  FLIXTRAIN = 324;
  BUS4YOU = 327;
  VY_EXPRESS = 328;
  MASEXPRESSEN = 361;
  SILVERLINJEN = 364;
  HARJEDALINGEN = 365;
  ORESUNDSLINJEN = 370;
  SNALLTAGET = 380;
  VY_NATTAG = 512;
  NORRTAG = 513;
  KROSATAGEN = 583;
  KARLSTADSBUSS = 601;
  LULEA_LOKALTRAFIK = 602;
  TROSABUSSEN = 604;
  KROSATAGEN2 = 648;
  MTRX = 812;
  FLIXBUS = 838;
}

// Data about depature from a stop.
message DepartureData {
  // String representing this unique departure, such as "11 Akalla".
  string canonical_name = 1;
  // The color we think this depature has.
  int32 color = 2;
  // Same as color if null.
  int32 group_of_line_id = 3;
  // Direction, subway usually have two directions per stop.
  int32 direction_id = 4;
  NgTrafficType traffic_type = 5;
  // Name of traffic operator.
  ResRobotOperatorEnum operator = 6;
  // Actual text representation of operator.
  string operator_name = 7;
}

message SiteId {
  int64 site_id = 1;
  string str_site_id = 2;
}

// Data about a stop.
message StopData {
  // Unique siteId.
  int64 site_id = 1;
  // Use this instead!
  SiteId site = 6;
  
  // Unique canonical name, such as "Kista (Stockholm)".
  string canonical_name = 2;
  // Short display name, such as "Kista".
  string display_name = 3;
  // Latitude of the stop.
  double lat = 4;
  // Longitude of the stop.
  double lng = 5;
  
  // What we know about traffic at this stop.
  repeated NgTrafficType traffic_type = 7;
  
  // Combined stop?
  bool meta_stop = 8;
}

// Message for both request and response of a ping.
message PingRequestResponse {
  // Client should send us a local timestamp.
  int64 local_timestamp_millis = 1;
}

// ******Below a messages stored in the client as configuration ******

// A filter based on line and direction.
message LineFilter {
  // Group of line, such as the red subway line.
  // Renamed to lineId internally.
  int32 group_of_line_id = 1;
  // Direction of this line we're interested in.
  int32 direction_id = 2;
}

// Specific departures filter.
message DeparturesFilter {
  repeated string departures = 1;
  // Can specificy hash instead.
  repeated int32 departures_hash = 2;
}

// Configuration for a single widget.
message WidgetConfiguration {
  // Android widgetId.
  int64 widget_id = 1;
  // The stops we've configured at this widget.
  repeated StopConfiguration stop_configuration = 2;
  // Settings for how widget is updated.
  UpdateSettings update_settings = 3;
}

message UpdateSettings {
  enum UpdateMode {
	// Learn when to update from user interaction. This is default.
	LEARNING_UPDATE_MODE = 0;
	// Update only from user interaction.
    MANUAL_UPDATE_MODE = 1;
	// Always keep updated when screen is on.
    ALWAYS_UPDATE_MODE = 2;
  }
  UpdateMode update_mode = 1;
  // Always update mode
  bool update_when_screen_on = 2;
  // In minutes, how long an update period lasts.
  int32 update_sequence_length = 3;
  //  Self-learning mode
  int32 interactions_to_learn = 4;
  // How many periods to learn.
  int32 learning_periods = 5;
}

message StoredStopData {
  int64 site_id = 1 [deprecated = true];
  SiteId site = 6;

  string canonical_name = 2;
  string display_name = 3;
  double lat = 4;
  double lng = 5;
}

message StopDataRequest {
  int64 site_id = 1 [deprecated = true];
  SiteId site = 4;

  DeparturesFilter departures_filter = 2;
  repeated LineFilter line_filter = 3;
  // Give all the data for the step if empty.
}

message ColorConfig {
  bool override_main_color = 1;
  int32 main_color = 2;
  bool override_text_color = 3;
  int32 text_color = 4;
  bool override_bg_color = 5;
  int32 bg_color = 6;
  bool override_tag_text_color = 7;
  int32 tag_text_color = 8;
  bool override_middle_bar_color = 9;
  int32 middle_bar_color = 10;
}

message ThemeData {
  // Color config.
  ColorConfig color_config = 1;
  // Custom departure names.
  map<string, string> departure_name_mappings = 2;
}

message StopConfiguration {
  StoredStopData stop_data = 1;
  DeparturesFilter departures_filter = 2;
  repeated LineFilter line_filter = 3;
  ThemeData theme_data = 4;
}

message TrafficMetaData {
  int32 color = 1;
  bool has_realtime_data = 2;
}

message VariableSetting {
  int32 int_value = 1;
  string str_value = 2;
}

message OperatorConfig {
  ResRobotOperatorEnum operator = 1;
  // URL for fetching Favicon.
  string favicon_url = 2;
  // Bytes of favicon in PNG format.
  bytes favicon_bytes_png = 3;

  // MetaData about departures.
  map<string, TrafficMetaData> departure_metadata = 4;
}

// Message stored/parsed in server.
message ServerSideConfig {
  // Whatever variable needs to be store & parsed server side.
  map<string, VariableSetting> variable_settings = 1;
  // ResRobotOperatorEnum to URL. 
  map<string, string> operator_icon_urls = 2;
  // Map SID to siteString.
  map<int64, string> legacy_stop_mapping = 3;
  // Map known colors values, operator_trafficType_lineNumber -> 32 bit color value.
  map<string, int32> hardcoded_color_mappings = 4;
}
